// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	client "github.com/hyperledger/fabric-gateway/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNetwork is an autogenerated mock type for the Network type
type MockNetwork struct {
	mock.Mock
}

type MockNetwork_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetwork) EXPECT() *MockNetwork_Expecter {
	return &MockNetwork_Expecter{mock: &_m.Mock}
}

// ChaincodeEvents provides a mock function with given fields: ctx, chaincodeName, options
func (_m *MockNetwork) ChaincodeEvents(ctx context.Context, chaincodeName string, options ...client.ChaincodeEventsOption) (<-chan *client.ChaincodeEvent, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, chaincodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan *client.ChaincodeEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.ChaincodeEventsOption) (<-chan *client.ChaincodeEvent, error)); ok {
		return rf(ctx, chaincodeName, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.ChaincodeEventsOption) <-chan *client.ChaincodeEvent); ok {
		r0 = rf(ctx, chaincodeName, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *client.ChaincodeEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.ChaincodeEventsOption) error); ok {
		r1 = rf(ctx, chaincodeName, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetwork_ChaincodeEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChaincodeEvents'
type MockNetwork_ChaincodeEvents_Call struct {
	*mock.Call
}

// ChaincodeEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - chaincodeName string
//   - options ...client.ChaincodeEventsOption
func (_e *MockNetwork_Expecter) ChaincodeEvents(ctx interface{}, chaincodeName interface{}, options ...interface{}) *MockNetwork_ChaincodeEvents_Call {
	return &MockNetwork_ChaincodeEvents_Call{Call: _e.mock.On("ChaincodeEvents",
		append([]interface{}{ctx, chaincodeName}, options...)...)}
}

func (_c *MockNetwork_ChaincodeEvents_Call) Run(run func(ctx context.Context, chaincodeName string, options ...client.ChaincodeEventsOption)) *MockNetwork_ChaincodeEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.ChaincodeEventsOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.ChaincodeEventsOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockNetwork_ChaincodeEvents_Call) Return(_a0 <-chan *client.ChaincodeEvent, _a1 error) *MockNetwork_ChaincodeEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetwork_ChaincodeEvents_Call) RunAndReturn(run func(context.Context, string, ...client.ChaincodeEventsOption) (<-chan *client.ChaincodeEvent, error)) *MockNetwork_ChaincodeEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetContract provides a mock function with given fields: chaincodeName
func (_m *MockNetwork) GetContract(chaincodeName string) *client.Contract {
	ret := _m.Called(chaincodeName)

	var r0 *client.Contract
	if rf, ok := ret.Get(0).(func(string) *client.Contract); ok {
		r0 = rf(chaincodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Contract)
		}
	}

	return r0
}

// MockNetwork_GetContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContract'
type MockNetwork_GetContract_Call struct {
	*mock.Call
}

// GetContract is a helper method to define mock.On call
//   - chaincodeName string
func (_e *MockNetwork_Expecter) GetContract(chaincodeName interface{}) *MockNetwork_GetContract_Call {
	return &MockNetwork_GetContract_Call{Call: _e.mock.On("GetContract", chaincodeName)}
}

func (_c *MockNetwork_GetContract_Call) Run(run func(chaincodeName string)) *MockNetwork_GetContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetwork_GetContract_Call) Return(_a0 *client.Contract) *MockNetwork_GetContract_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetwork_GetContract_Call) RunAndReturn(run func(string) *client.Contract) *MockNetwork_GetContract_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetwork creates a new instance of MockNetwork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetwork(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetwork {
	mock := &MockNetwork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
